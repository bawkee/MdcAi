<?xml version="1.0" encoding="utf-8"?>

<local:ConversationBase
  x:Class="MdcAi.ChatUI.Views.Conversation"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:local="using:MdcAi.ChatUI.Views"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:c="using:CommunityToolkit.WinUI.Controls"
  xmlns:winUi="using:CommunityToolkit.WinUI"
  xmlns:converters="using:CommunityToolkit.WinUI.UI.Converters"
  xmlns:salaConverters="using:RxUIExt.WinUI.SalaConverters"
  xmlns:extensions="using:MdcAi.Extensions.WinUI"
  xmlns:viewModels="using:MdcAi.ChatUI.ViewModels"
  xmlns:animations="using:CommunityToolkit.WinUI.Animations"
  mc:Ignorable="d">

  <UserControl.Resources>
    <ResourceDictionary>
      <converters:BoolToVisibilityConverter x:Key="boolToVis" />
      <salaConverters:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />
      <extensions:BindingTypeConverter x:Key="TypeConverter" />
      <extensions:BindingFormatConverter x:Key="StringFormatConverter" />
      <extensions:RoundDecimalConverter x:Key="RoundDecimalConverter" />

      <ThemeShadow x:Name="DropShadow" />

      <ResourceDictionary.ThemeDictionaries>

        <ResourceDictionary x:Key="Default">
          <AcrylicBrush x:Key="OverlayMessageTint"
                        TintOpacity="0.2"
                        TintColor="#1e1e1e"
                        FallbackColor="#1e1e1e" />
        </ResourceDictionary>

        <ResourceDictionary x:Key="Light">
          <AcrylicBrush x:Key="OverlayMessageTint"
                        TintOpacity="0.7"
                        TintColor="White"
                        FallbackColor="White" />
        </ResourceDictionary>

      </ResourceDictionary.ThemeDictionaries>
    </ResourceDictionary>

  </UserControl.Resources>


  <c:DockPanel>

    <CommandBar c:DockPanel.Dock="Top" DefaultLabelPosition="Right">
      <AppBarButton Icon="Refresh" Label="Regenerate" Command="{x:Bind ViewModel.RegenerateSelectedCmd, Mode=OneWay}" />
      <AppBarButton Icon="Delete" Label="Delete" Command="{x:Bind ViewModel.DeleteSelectedCmd, Mode=OneWay}" />

      <AppBarSeparator />

      <AppBarButton Icon="Edit" Label="Edit" Command="{x:Bind ViewModel.EditSelectedCmd, Mode=OneWay}" />

      <AppBarButton Command="{x:Bind ViewModel.PrevVersionCmd, Mode=OneWay}"
                    ToolTipService.ToolTip="Select previous version"
                    LabelPosition="Collapsed"
                    Width="40">
        <AppBarButton.Icon>
          <FontIcon Glyph="&#xE973;" />
        </AppBarButton.Icon>
      </AppBarButton>
      <AppBarButton Command="{x:Bind ViewModel.NextVersionCmd, Mode=OneWay}"
                    ToolTipService.ToolTip="Select next version"
                    LabelPosition="Collapsed"
                    Width="40">
        <AppBarButton.Icon>
          <FontIcon Glyph="&#xE974;" />
        </AppBarButton.Icon>
      </AppBarButton>

      <AppBarSeparator
        Visibility="{x:Bind extensions:Debugging.Enabled, Converter={StaticResource boolToVis}}" />
      <AppBarButton Icon="Add"
                    Label="Add"
                    Command="{x:Bind ViewModel.DebugGeneratePromptCmd, Mode=OneWay}"
                    Visibility="{x:Bind extensions:Debugging.Enabled, Converter={StaticResource boolToVis}}" />

      <AppBarButton Icon="Favorite"
                    Label="Test"
                    Command="{x:Bind ViewModel.DebugCmd, Mode=OneWay}"
                    Visibility="{x:Bind extensions:Debugging.Enabled, Converter={StaticResource boolToVis}}" />
    </CommandBar>

    <c:DockPanel>
      <c:DockPanel c:DockPanel.Dock="Bottom">
        <StackPanel c:DockPanel.Dock="Right" Margin="0,10,10,10" VerticalAlignment="Bottom" Orientation="Horizontal">
          <StackPanel.Resources>
            <!-- Override settings button -->
            <DataTemplate x:Key="OverrideSettingsBtnTemplate" x:DataType="viewModels:ConversationVm">
              <Button Command="{Binding Path=EditSettingsCmd, Mode=OneWay}" Height="32" Padding="10,0"
                      Margin="10,0,0,0">
                <SymbolIcon Symbol="Setting" />
              </Button>
            </DataTemplate>
          </StackPanel.Resources>

          <!-- Send prompt button -->
          <SplitButton Command="{x:Bind ViewModel.SendPromptCmd, Mode=OneWay}" Height="32" Padding="10,0">
            <StackPanel Orientation="Horizontal">
              <TextBlock Text="{x:Bind ViewModel.Settings.SelectedModel, Mode=OneWay}" />
              <SymbolIcon Symbol="Send" VerticalAlignment="Center" Margin="10,0,0,0" />
            </StackPanel>
            <SplitButton.Flyout>
              <MenuFlyout x:Name="ModelsMenu" />
            </SplitButton.Flyout>
          </SplitButton>

          <!-- Override Settings button content depending on whether it is overriden -->
          <ContentControl ContentTemplate="{StaticResource OverrideSettingsBtnTemplate}"
                          Content="{x:Bind ViewModel, Mode=OneWay}"
                          Visibility="{x:Bind ViewModel.SettingsOverriden, Converter={StaticResource boolToVis}, Mode=OneWay}">
            <ContentControl.Resources>
              <SolidColorBrush x:Key="ButtonBackground" Color="{StaticResource ImportantTransButtonBackground}" />
              <SolidColorBrush x:Key="ButtonBackgroundPointerOver"
                               Color="{StaticResource ImportantTransButtonBackgroundPointerOver}" />
              <SolidColorBrush x:Key="ButtonBackgroundPressed"
                               Color="{StaticResource ImportantTransButtonBackgroundPressed}" />
              <SolidColorBrush x:Key="ButtonBackgroundDisabled"
                               Color="{StaticResource ImportantTransButtonBackgroundDisabled}" />
            </ContentControl.Resources>
          </ContentControl>

          <ContentControl ContentTemplate="{StaticResource OverrideSettingsBtnTemplate}"
                          Content="{x:Bind ViewModel, Mode=OneWay}"
                          Visibility="{x:Bind ViewModel.SettingsOverriden, Converter={StaticResource boolToVis}, ConverterParameter=True, Mode=OneWay}" />
        </StackPanel>

        <StackPanel>
          <!-- Read only notice -->
          <StackPanel Margin="10,10,10,0"
                      Orientation="Horizontal"
                      Visibility="{x:Bind ViewModel.ShowReadOnlyNotice, Converter={StaticResource boolToVis}, Mode=OneWay}">
            <TextBlock FontSize="12"
                       Foreground="{ThemeResource AccentTextFillColorSecondaryBrush}">
              <Run>⚠️</Run>
              <Run Text="Messages are read-only due to missing or incorrect configuration" />
              <Hyperlink
                winUi:HyperlinkExtensions.Command="{x:Bind ViewModel.Conversations.GoToSettingsCmd, Mode=OneWay}">
                <Run Text="(go to Settings)" />
              </Hyperlink>
            </TextBlock>
          </StackPanel>

          <!-- Editing a message notice -->
          <StackPanel Margin="10,10,10,0"
                      Orientation="Horizontal"
                      Visibility="{x:Bind ViewModel.EditMessage, Converter={StaticResource NullToVisibilityConverter}, Mode=OneWay}">
            <TextBlock FontSize="12"
                       Foreground="{ThemeResource AccentTextFillColorSecondaryBrush}">
              <Run Text="Editing message sent on" />
              <Run Text="{x:Bind ViewModel.EditMessage.Message.CreatedTs, Mode=OneWay}" />
              <Hyperlink winUi:HyperlinkExtensions.Command="{x:Bind ViewModel.CancelEditCmd, Mode=OneWay}">
                <Run Text="(Cancel Edit)" />
              </Hyperlink>
            </TextBlock>
          </StackPanel>

          <!-- Prompt field -->
          <TextBox x:Name="PromptField"
                   Margin="10"
                   MaxHeight="400"
                   AcceptsReturn="True"
                   FontSize="15"
                   PlaceholderText="Write your prompt here"
                   ScrollViewer.VerticalScrollBarVisibility="Auto"
                   TextWrapping="Wrap"
                   Text="{x:Bind ViewModel.Prompt.Contents, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
        </StackPanel>
      </c:DockPanel>

      <Grid>
        <!-- We need this animation so this element doesn't stay shown while child show/hide animations are running when
        the whole control is deactivated -->
        <animations:Implicit.ShowAnimations>
          <animations:OpacityAnimation Duration="0:0:0.1" To="1" />
        </animations:Implicit.ShowAnimations>
        <animations:Implicit.HideAnimations>
          <animations:OpacityAnimation Duration="0:0:0.1" To="0" />
        </animations:Implicit.HideAnimations>

        <WebView2 x:Name="ChatWebView"
                  DefaultBackgroundColor="Transparent" />

        <!-- Stop generating button -->
        <Grid VerticalAlignment="Bottom"
              HorizontalAlignment="Right"
              Margin="0,0,30,20"
              Visibility="{x:Bind ViewModel.Tail.Message.IsCompleting, Mode=OneWay, Converter={StaticResource boolToVis}, FallbackValue=Collapsed}">
          <Button Content="Stop Generating"
                  Padding="10,5,10,8"
                  Command="{x:Bind ViewModel.Tail.Message.StopCompletionCmd, Mode=OneWay}">
            <Button.Resources>
              <!-- Transparent backgrounds so the button is visible but translucent -->
              <SolidColorBrush x:Key="ButtonBackground" Color="{StaticResource ImportantTransButtonBackground}" />
              <SolidColorBrush x:Key="ButtonBackgroundPointerOver"
                               Color="{StaticResource ImportantTransButtonBackgroundPointerOver}" />
              <SolidColorBrush x:Key="ButtonBackgroundPressed"
                               Color="{StaticResource ImportantTransButtonBackgroundPressed}" />
              <SolidColorBrush x:Key="ButtonBackgroundDisabled"
                               Color="{StaticResource ImportantTransButtonBackgroundDisabled}" />
            </Button.Resources>
          </Button>
        </Grid>

        <!-- Welcome notice -->
        <UserControl
          Visibility="{x:Bind ViewModel.ShowGettingStartedTips, Converter={StaticResource boolToVis}, Mode=OneWay}">

          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup>
                <VisualState x:Name="Default">

                </VisualState>

                <VisualState x:Name="Compact">
                  <VisualState.StateTriggers>
                    <winUi:ControlSizeTrigger TargetElement="{x:Bind WelcomeNotice}" MaxHeight="250" />
                  </VisualState.StateTriggers>
                  <VisualState.Setters>
                    <Setter Target="WelcomeContentScroll.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>

            <Grid x:Name="WelcomeNotice">
              <Border>
                <Border.Background>
                  <ImageBrush ImageSource="ms-appx:///MdcAi.ChatUI/Assets/WideBackgroundTransparent.png"
                              Stretch="UniformToFill"
                              AlignmentX="Center"
                              AlignmentY="Top" />
                </Border.Background>
              </Border>

              <ScrollViewer x:Name="WelcomeContentScroll">

                <animations:Implicit.ShowAnimations>
                  <animations:TranslationAnimation Duration="0:0:0.2" From="0,-200,0" To="0" Repeat="1" />
                  <animations:OpacityAnimation Duration="0:0:0.2" From="0" To="1.0" Repeat="1" />
                </animations:Implicit.ShowAnimations>

                <!-- Messes with the ViewHost. They both mess with various things but this one is too much. -->
                <animations:Implicit.HideAnimations>
                  <animations:OpacityAnimation Duration="0:0:0.2" To="0" />
                  <animations:ScalarAnimation Target="Translation.Y" Duration="0:0:0.2" To="-200">
                    <animations:ScalarKeyFrame Key="0.1" Value="30" />
                    <animations:ScalarKeyFrame Key="0.5" Value="0.0" />
                  </animations:ScalarAnimation>
                </animations:Implicit.HideAnimations>

                <StackPanel
                  Margin="20"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  x:Name="WelcomeNoticeContent"
                  Visibility="Visible">

                  <Border CornerRadius="5" Shadow="{StaticResource DropShadow}">

                    <Grid>
                      <Rectangle Fill="{ThemeResource OverlayMessageTint}" />

                      <Grid>

                        <!-- Welcoming notice, when AI is not ready -->
                        <Grid
                          Visibility="{x:Bind ViewModel.IsAIReady, Converter={StaticResource boolToVis}, ConverterParameter=True, Mode=OneWay}"
                          Padding="15">
                          <StackPanel Spacing="10">
                            <TextBlock Style="{ThemeResource TitleTextBlockStyle}">Welcome to MDC AI 👋</TextBlock>
                            <TextBlock TextWrapping="Wrap">
                              To chat with AI, you'll need an <Bold>OpenAI API Key</Bold>. This service operates on a pay-as-you-go basis
                              and is available for sign-up directly from the
                              <Hyperlink NavigateUri="https://openai.com/blog/openai-api">OpenAI website</Hyperlink>.
                              Enrollment is quick, taking approximately 5 minutes, and starting costs are
                              <Hyperlink
                                NavigateUri="https://help.openai.com/en/articles/8264644-what-is-prepaid-billing">
                                as low as $5
                              </Hyperlink>
                              .
                              Increase your limit anytime as needed.
                            </TextBlock>

                            <TextBlock TextWrapping="Wrap">
                              To use your API key, go to the
                              <Hyperlink
                                winUi:HyperlinkExtensions.Command="{x:Bind ViewModel.Conversations.GoToSettingsCmd, Mode=OneWay}">
                                settings page
                              </Hyperlink>
                              and paste it.
                            </TextBlock>
                          </StackPanel>
                        </Grid>

                        <!-- Getting started tips -->
                        <c:DockPanel
                          Visibility="{x:Bind ViewModel.IsAIReady, Converter={StaticResource boolToVis}, Mode=OneWay}">
                          <StackPanel Margin="2">
                            <TextBlock Style="{ThemeResource TitleTextBlockStyle}" Margin="15,5,15,5">
                              Getting Started Tips
                            </TextBlock>
                            <NavigationView x:Name="TipsNavigationView"
                                            PaneDisplayMode="Top"
                                            IsSettingsVisible="False"
                                            IsBackButtonVisible="Collapsed"
                                            ItemInvoked="TipsNavigationView_OnItemInvoked"
                                            SelectionChanged="TipsNavigationView_OnSelectionChanged"
                                            Loaded="TipsNavigationView_OnLoaded">
                              <NavigationView.MenuItems>
                                <NavigationViewItem Content="Conversations" Tag="Conversations" />
                                <NavigationViewItem Content="Categories" Tag="Categories" />
                                <NavigationViewItem Content="Editing" Tag="Editing" />
                                <NavigationViewItem Content="Settings" Tag="Settings" />
                                <NavigationViewItem Content="Premise" Tag="Premise" />
                              </NavigationView.MenuItems>
                              <Frame x:Name="TipsContentFrame" Margin="10" />
                            </NavigationView>
                          </StackPanel>
                        </c:DockPanel>
                      </Grid>
                    </Grid>

                  </Border>

                  <!-- Extra links, outside of the tinted border -->
                  <StackPanel Margin="10" Spacing="10">
                    <TextBlock HorizontalAlignment="Left">
                      <Hyperlink Click="DontShowGettingStartedTip_OnClick">Don't show these tips anymore (can be re-enabled in Settings)</Hyperlink>
                    </TextBlock>

                    <TextBlock
                      HorizontalAlignment="Left"
                      Visibility="{x:Bind ViewModel.GlobalSettings.ShowPrivacyStatementCmd, Converter={StaticResource NullToVisibilityConverter}, FallbackValue=Collapsed, Mode=OneWay}">
                      <Hyperlink Click="ShowPrivacyHyperlink_OnClick">Your Privacy is Safe</Hyperlink>
                    </TextBlock>
                  </StackPanel>
                </StackPanel>
              </ScrollViewer>
            </Grid>
          </Grid>
        </UserControl>

        <!-- Settings override popup -->
        <ContentDialog x:Name="SettingsDialog"
                       PrimaryButtonText="Done"
                       IsSecondaryButtonEnabled="{x:Bind ViewModel.SettingsOverriden, Mode=OneWay}"
                       SecondaryButtonText="Reset"
                       SecondaryButtonCommand="{x:Bind ViewModel.ResetSettingsCmd, Mode=OneWay}">
          <ContentDialog.Resources>
            <Thickness x:Key="ContentDialogPadding">10</Thickness>
          </ContentDialog.Resources>

          <Pivot Width="400" DataContext="{x:Bind ViewModel, Mode=OneWay}">
            <PivotItem Header="Parameters">
              <StackPanel Margin="0,10,0,0">

                <c:UniformGrid Margin="0,5,0,0" Columns="2"
                               ToolTipService.ToolTip="Crank up the temperature for creative chaos, turn it down for repetitive, predictable answers. An AI thermostat of sorts.">
                  <TextBlock Margin="0,5">
                    <Run Text="Temperature:" />
                    <Run
                      Text="{x:Bind ViewModel.Settings.Temperature, Mode=OneWay, Converter={StaticResource StringFormatConverter}, ConverterParameter='{}{0:N2}'}" />
                  </TextBlock>

                  <Slider
                    Value="{x:Bind ViewModel.Settings.Temperature, Mode=TwoWay, Converter={StaticResource RoundDecimalConverter}}"
                    Minimum="0"
                    Maximum="2"
                    SmallChange="0.05"
                    StepFrequency="0.1" />
                </c:UniformGrid>

                <c:UniformGrid Margin="0,5,0,0" Columns="2">
                  <TextBlock Margin="0,5"
                             ToolTipService.ToolTip="Higher value means more factual answers and less nonsense. Lower it to see the weirdo, but more human, side of AI more often.">
                    <Run Text="Top Probability:" />
                    <Run
                      Text="{x:Bind Path=ViewModel.Settings.TopP, Mode=OneWay, Converter={StaticResource StringFormatConverter}, ConverterParameter='{}{0:N2}'}" />
                  </TextBlock>
                  <Slider
                    Value="{x:Bind ViewModel.Settings.TopP, Mode=TwoWay, Converter={StaticResource RoundDecimalConverter}}"
                    Minimum="0"
                    Maximum="1"
                    SmallChange="0.05"
                    StepFrequency="0.1" />
                </c:UniformGrid>

                <c:UniformGrid Margin="0,5,0,0" Columns="2"
                               ToolTipService.ToolTip="Increase the value to prevent repetitive character that makes AI look like it's got early dementia. Lower it if you yourself don't have the best memory.">
                  <TextBlock Margin="0,5">
                    <Run Text="Frequency Penalty:" />
                    <Run
                      Text="{x:Bind ViewModel.Settings.FrequencyPenalty, Mode=OneWay, Converter={StaticResource StringFormatConverter}, ConverterParameter='{}{0:N2}'}" />
                  </TextBlock>
                  <Slider
                    Value="{x:Bind ViewModel.Settings.FrequencyPenalty, Mode=TwoWay, Converter={StaticResource RoundDecimalConverter}}"
                    Minimum="0"
                    Maximum="2"
                    SmallChange="0.05"
                    StepFrequency="0.1" />
                </c:UniformGrid>

                <c:UniformGrid Margin="0,5,0,0" Columns="2"
                               ToolTipService.ToolTip="Increase the value to prevent AI from re-using same words or phrases over and over again to the point of being annoying.">
                  <TextBlock Margin="0,5">
                    <Run Text="Presence Penalty:" />
                    <Run
                      Text="{x:Bind ViewModel.Settings.PresencePenalty, Mode=OneWay, Converter={StaticResource StringFormatConverter}, ConverterParameter='{}{0:N2}'}" />
                  </TextBlock>
                  <Slider
                    Value="{x:Bind ViewModel.Settings.PresencePenalty, Mode=TwoWay, Converter={StaticResource RoundDecimalConverter}}"
                    Minimum="0"
                    Maximum="2"
                    SmallChange="0.05"
                    StepFrequency="0.1" />
                </c:UniformGrid>

                <c:UniformGrid Margin="0,5,0,0" Columns="2"
                               ToolTipService.ToolTip="Turning this setting off will result in completions being delivered in all-at-once fashion, rather than word by word.">
                  <TextBlock Text="Completion Streaming" Margin="0,5" />
                  <ToggleSwitch IsOn="{x:Bind ViewModel.Settings.Streaming, Mode=TwoWay}" />
                </c:UniformGrid>

                <c:UniformGrid Columns="2">
                  <TextBlock Text="Default Model" Margin="0,5" />
                  <ComboBox x:Name="ChatSettingModelDropdown" HorizontalAlignment="Stretch" />
                </c:UniformGrid>

              </StackPanel>
            </PivotItem>
            <PivotItem Header="Premise">
              <c:DockPanel Margin="0,15,0,0">
                <Border c:DockPanel.Dock="Top" Visibility="{x:Bind ViewModel.Settings.IsReasoningModel, Converter={StaticResource boolToVis}, Mode=OneWay}">
                  <TextBlock TextWrapping="WrapWholeWords" Text="⚠️ WARNING: Premise is ignored in reasoning models such as o1-* and o3-*" Padding="0" />
                </Border>

                <TextBox TextWrapping="Wrap"
                         Text="{x:Bind ViewModel.Settings.Premise, Mode=TwoWay}"
                         Margin="0,10,0,0"
                         MaxHeight="200"
                         AcceptsReturn="True"
                         ScrollViewer.VerticalScrollBarVisibility="Auto" />
              </c:DockPanel>
            </PivotItem>
          </Pivot>
        </ContentDialog>
      </Grid>
    </c:DockPanel>
  </c:DockPanel>
</local:ConversationBase>